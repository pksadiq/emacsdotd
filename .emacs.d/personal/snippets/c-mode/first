# -*- mode: snippet -*-
# name: Initialize the function, function class, etc
# key: f.
# condition: (progn (gnome-c-style-mode 1) t)
# --
#include "`(replace-regexp-in-string "\\.c" "\.h" (file-name-nondirectory buffer-file-name))`"

${3:$(if (string-match-p "TYPE_WITH_PRIVATE" yas-text)
(concat "
typedef struct
{

} " (str-to-style gnome-package "upcamel") "Private" ";
"))}
struct _${1:$(str-to-style yas-text "upcamel")}
{
${2:$(str-to-style (replace-regexp-in-string "TYPE_" "" yas-text) "upcamel")} parent_instance;
};


G_DEFINE_${3:TYPE$(yas-choose-value '("TYPE" "INTERFACE" "TYPE_WITH_PRIVATE"))} (${1:$(str-to-style yas-text "upcamel")}, ${1:gtk_application$(setq gnome-package (str-to-style yas-text "snake"))}, ${2:GTK_TYPE_${1:$(get-next yas-text)}$(upcase (str-to-style (downcase yas-text) "snake"))})
${0:$$(progn (read-only-mode) (deactivate-mark))}
static void
$1_finalize (GObject *object)
{
  G_OBJECT_CLASS ($1_parent_class)->finalize (object);
}

static void
$1_class_init (${1:$(str-to-style yas-text "upcamel")}Class *klass)
{
  GObjectClass *object_class = G_OBJECT_CLASS (klass);
  ${4:GApplication$(setq gnome-parent (str-to-style yas-text "upcamel"))}Class *${4:$(downcase (get-next (str-to-style yas-text "snake")))}_class = ${4:$(get-first (str-to-style yas-text "snake"))}_${4:$(get-next (str-to-style yas-text  "snake"))}_CLASS (klass);

  object_class->finalize = $1_finalize;
}

static void
$1_init (${1:$(str-to-style yas-text "upcamel")} *self)
{

}

${5:${1:$(str-to-style yas-text "upcamel")}$(str-to-style yas-text "upcamel")} *
$1_new (void)
{
  return g_object_new (${1:$(get-first yas-text)}_TYPE_${1:$(get-next yas-text)},
                       NULL);
}
